// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kazhuravlev/healthcheck (interfaces: IHealthcheck)
//
// Generated by this command:
//
//	mockgen -destination server_mock_test.go -package healthcheck_test . IHealthcheck
//

// Package healthcheck_test is a generated GoMock package.
package healthcheck_test

import (
	context "context"
	reflect "reflect"

	healthcheck "github.com/kazhuravlev/healthcheck"
	gomock "go.uber.org/mock/gomock"
)

// MockIHealthcheck is a mock of IHealthcheck interface.
type MockIHealthcheck struct {
	ctrl     *gomock.Controller
	recorder *MockIHealthcheckMockRecorder
}

// MockIHealthcheckMockRecorder is the mock recorder for MockIHealthcheck.
type MockIHealthcheckMockRecorder struct {
	mock *MockIHealthcheck
}

// NewMockIHealthcheck creates a new mock instance.
func NewMockIHealthcheck(ctrl *gomock.Controller) *MockIHealthcheck {
	mock := &MockIHealthcheck{ctrl: ctrl}
	mock.recorder = &MockIHealthcheckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHealthcheck) EXPECT() *MockIHealthcheckMockRecorder {
	return m.recorder
}

// RunAllChecks mocks base method.
func (m *MockIHealthcheck) RunAllChecks(arg0 context.Context) healthcheck.Report {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAllChecks", arg0)
	ret0, _ := ret[0].(healthcheck.Report)
	return ret0
}

// RunAllChecks indicates an expected call of RunAllChecks.
func (mr *MockIHealthcheckMockRecorder) RunAllChecks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAllChecks", reflect.TypeOf((*MockIHealthcheck)(nil).RunAllChecks), arg0)
}
