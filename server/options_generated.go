// Code generated by options-gen. DO NOT EDIT.
package server

import (
	fmt461e464ebed9 "fmt"

	"github.com/kazhuravlev/healthcheck"
	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
)

type OptOptionsSetter func(o *Options)

func NewOptions(
	options ...OptOptionsSetter,
) Options {
	o := Options{}

	// Setting defaults from variable
	o.port = defaultOptions.port

	o.healthcheck = defaultOptions.healthcheck

	o.logger = defaultOptions.logger

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func WithPort(opt int) OptOptionsSetter {
	return func(o *Options) {
		o.port = opt

	}
}

func WithHealthcheck(opt *healthcheck.Service) OptOptionsSetter {
	return func(o *Options) {
		o.healthcheck = opt

	}
}

func WithLogger(opt ILogger) OptOptionsSetter {
	return func(o *Options) {
		o.logger = opt

	}
}

func (o *Options) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("port", _validate_Options_port(o)))
	errs.Add(errors461e464ebed9.NewValidationError("healthcheck", _validate_Options_healthcheck(o)))
	errs.Add(errors461e464ebed9.NewValidationError("logger", _validate_Options_logger(o)))
	return errs.AsError()
}

func _validate_Options_port(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.port, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `port` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_healthcheck(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.healthcheck, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `healthcheck` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_logger(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.logger, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `logger` did not pass the test: %w", err)
	}
	return nil
}
